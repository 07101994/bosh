// Code generated by counterfeiter. DO NOT EDIT.
package serverfakes

import (
	sync "sync"

	server "github.com/cloudfoundry/bosh-cpi/server"
)

type FakeCPIExecutor struct {
	ExecuteStub        func(string, server.CPIRequest) (*server.CPIResponse, error)
	executeMutex       sync.RWMutex
	executeArgsForCall []struct {
		arg1 string
		arg2 server.CPIRequest
	}
	executeReturns struct {
		result1 *server.CPIResponse
		result2 error
	}
	executeReturnsOnCall map[int]struct {
		result1 *server.CPIResponse
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCPIExecutor) Execute(arg1 string, arg2 server.CPIRequest) (*server.CPIResponse, error) {
	fake.executeMutex.Lock()
	ret, specificReturn := fake.executeReturnsOnCall[len(fake.executeArgsForCall)]
	fake.executeArgsForCall = append(fake.executeArgsForCall, struct {
		arg1 string
		arg2 server.CPIRequest
	}{arg1, arg2})
	fake.recordInvocation("Execute", []interface{}{arg1, arg2})
	fake.executeMutex.Unlock()
	if fake.ExecuteStub != nil {
		return fake.ExecuteStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.executeReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeCPIExecutor) ExecuteCallCount() int {
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	return len(fake.executeArgsForCall)
}

func (fake *FakeCPIExecutor) ExecuteCalls(stub func(string, server.CPIRequest) (*server.CPIResponse, error)) {
	fake.executeMutex.Lock()
	defer fake.executeMutex.Unlock()
	fake.ExecuteStub = stub
}

func (fake *FakeCPIExecutor) ExecuteArgsForCall(i int) (string, server.CPIRequest) {
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	argsForCall := fake.executeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCPIExecutor) ExecuteReturns(result1 *server.CPIResponse, result2 error) {
	fake.executeMutex.Lock()
	defer fake.executeMutex.Unlock()
	fake.ExecuteStub = nil
	fake.executeReturns = struct {
		result1 *server.CPIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeCPIExecutor) ExecuteReturnsOnCall(i int, result1 *server.CPIResponse, result2 error) {
	fake.executeMutex.Lock()
	defer fake.executeMutex.Unlock()
	fake.ExecuteStub = nil
	if fake.executeReturnsOnCall == nil {
		fake.executeReturnsOnCall = make(map[int]struct {
			result1 *server.CPIResponse
			result2 error
		})
	}
	fake.executeReturnsOnCall[i] = struct {
		result1 *server.CPIResponse
		result2 error
	}{result1, result2}
}

func (fake *FakeCPIExecutor) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.executeMutex.RLock()
	defer fake.executeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCPIExecutor) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ server.CPIExecutor = new(FakeCPIExecutor)
